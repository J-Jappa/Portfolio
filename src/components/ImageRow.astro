---
/**
 * props:
 *  - images: { src: string; alt?: string; caption?: string }[]
 *  - cols?: 2 | 3 (default 2)
 *  - lightbox?: boolean (default true)
 */
type Img = { src: string; alt?: string; caption?: string };
interface Props { images: Img[]; cols?: 2 | 3; lightbox?: boolean }

const { images = [], cols = 2, lightbox = true } = Astro.props as Props;
const gridCols = cols === 3 ? "sm:grid-cols-3" : "sm:grid-cols-2";
const uid = `row-${Math.random().toString(36).slice(2, 8)}`;
---

<div id={uid} class={`not-prose grid gap-3 my-3 ${gridCols}`}>
  {images.map((img: Img, i: number) => (
    <figure class="m-0">
      {lightbox ? (
        <>
          <!-- Keep original sizing: no aspect-* wrapper, image flows naturally -->
          <button
            class="block w-full overflow-hidden rounded-xl p-0 m-0 border-0 bg-transparent"
            data-open={`${uid}-dlg-${i}`}
            aria-label={`Open image ${i + 1}`}
          >
            <img
              src={img.src}
              alt={img.alt ?? ""}
              class="w-full rounded-xl object-cover"
              loading="lazy"
              decoding="async"
            />
          </button>

          <dialog
            id={`${uid}-dlg-${i}`}
            class="p-0 border-0 bg-transparent backdrop:bg-black/70"
          >
            <!-- Outer wrapper gives margin from screen edges -->
            <div class="m-4 sm:m-8">
              <!-- Panel with rounded corners & shadow -->
              <div class="relative rounded-xl overflow-hidden shadow-2xl bg-white dark:bg-neutral-900">
                <img
                  src={img.src}
                  alt={img.alt ?? ""}
                  class="block w-auto h-auto
                         max-w-[calc(100vw-3rem)] sm:max-w-[calc(100vw-6rem)]
                         max-h-[calc(100vh-3rem)] sm:max-h-[calc(100vh-6rem)]"
                  decoding="async"
                  loading="eager"
                />
                {img.caption && <p class="m-3 text-sm opacity-80">{img.caption}</p>}

                <!-- Close button -->
                <form method="dialog">
                  <button
                    class="absolute top-2 right-2 rounded-md border bg-white/85 dark:bg-neutral-800/85 px-3 py-1"
                    aria-label="Close"
                  >
                    Close
                  </button>
                </form>
              </div>
            </div>
          </dialog>

          {img.caption && (
            <figcaption class="mt-1 text-sm opacity-70">{img.caption}</figcaption>
          )}
        </>
      ) : (
        <>
          <img
            src={img.src}
            alt={img.alt ?? ""}
            class="w-full rounded-xl object-cover"
            loading="lazy"
            decoding="async"
          />
          {img.caption && (
            <figcaption class="mt-1 text-sm opacity-70">{img.caption}</figcaption>
          )}
        </>
      )}
    </figure>
  ))}
</div>

{lightbox && (
<script is:inline define:vars={{ uid }}>
  const root = document.getElementById(uid);
  if (!root) return;

  root.querySelectorAll('[data-open]').forEach((btn) => {
    const id = btn.getAttribute('data-open');
    if (!id) return;

    const dlg = document.getElementById(id);

    btn.addEventListener('click', () => {
      if (dlg && typeof dlg.showModal === 'function') dlg.showModal();
    });

    dlg && dlg.addEventListener('click', (e) => {
      if (e.target === dlg && typeof dlg.close === 'function') dlg.close();
    });

    dlg && dlg.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && typeof dlg.close === 'function') dlg.close();
    });
  });
</script>

)}
