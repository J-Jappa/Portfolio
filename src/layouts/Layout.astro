---
import { ClientRouter } from "astro:transitions";
import { PUBLIC_GOOGLE_SITE_VERIFICATION } from "astro:env/client";
import { SITE } from "@/config";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import "@/styles/global.css";

export interface Props {
  title?: string;
  author?: string;
  profile?: string;
  description?: string;
  ogImage?: string;
  canonicalURL?: string;
  pubDatetime?: Date;
  modDatetime?: Date | null;
  scrollSmooth?: boolean;
  favicon?: string;
}

const {
  title = SITE.title,
  author = SITE.author,
  profile = SITE.profile,
  description = SITE.desc,
  ogImage = SITE.ogImage ? `/${SITE.ogImage}` : "/og.jpg",
  canonicalURL = new URL(Astro.url.pathname, Astro.url),
  pubDatetime,
  modDatetime,
  scrollSmooth = false,
  favicon,
} = Astro.props;

const socialImageURL = new URL(ogImage, Astro.url);

const structuredData = {
  "@context": "https://schema.org",
  "@type": "WebPage",
  headline: `${title}`,
  image: `${socialImageURL}`,
  author: [{ "@type": "Person", name: `${author}`, ...(profile && { url: profile }) }],
};
---

<!doctype html>
<html
  dir={SITE.dir}
  lang={SITE.lang ?? "en"}
  class={scrollSmooth ? "scroll-smooth" : ""}
>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="canonical" href={canonicalURL} />
    <meta name="generator" content={Astro.generator} />

    <!-- Icons -->
    {
      favicon ? (
        <>
          <link rel="icon" href={favicon} sizes="any" />
          <link rel="apple-touch-icon" href="/icons/apple-touch-icon.png" />
        </>
      ) : (
        <>
          <link rel="icon" type="image/svg+xml" href="/icons/favicon.svg" />
          <link rel="icon" href="/icons/favicon.ico" sizes="any" />
          <link rel="apple-touch-icon" href="/icons/apple-touch-icon.png" />
          <link rel="manifest" href="/icons/manifest.webmanifest" />
        </>
      )
    }
    <meta name="theme-color" content="#111827" />

    <!-- General Meta Tags -->
    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta name="author" content={author} />
    <link rel="sitemap" href="/sitemap-index.xml" />

    <!-- Open Graph -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:image" content={socialImageURL} />
    {pubDatetime && (
      <meta property="article:published_time" content={pubDatetime.toISOString()} />
    )}
    {modDatetime && (
      <meta property="article:modified_time" content={modDatetime.toISOString()} />
    )}

    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={socialImageURL} />

    <!-- JSON-LD -->
    <script type="application/ld+json" is:inline set:html={JSON.stringify(structuredData)} />

    <!-- RSS -->
    <link rel="alternate" type="application/rss+xml" title={SITE.title} href={new URL("rss.xml", Astro.site)} />

    <!-- Search Console -->
    {PUBLIC_GOOGLE_SITE_VERIFICATION && (
      <meta name="google-site-verification" content={PUBLIC_GOOGLE_SITE_VERIFICATION} />
    )}

    <!-- Astro transitions -->
    <ClientRouter />

    <!-- Theme toggle -->
    <script is:inline src="/toggle-theme.js"></script>

    <!-- GoatCounter (no auto pageview; we trigger on swap) -->
    <script
      data-goatcounter="https://jasperjapp.goatcounter.com/count"
      data-goatcounter-settings='{"no_onload": true}'
      async
      src="//gc.zgo.at/count.js"></script>
    <noscript>
      <img src="https://jasperjapp.goatcounter.com/count?p=/noscript" alt="">
    </noscript>

    <!-- Pageview + event tracking + delegated lightbox -->
    <script is:inline>
      (() => {
        /* ----- GoatCounter pageviews on SPA swaps ----- */
        function gcCount() {
          const gc = window.goatcounter;
          if (!gc || typeof gc.count !== "function") return;
          const path = location.pathname + location.search + location.hash;
          gc.count({ path, title: document.title });
        }
        document.addEventListener("DOMContentLoaded", gcCount);
        document.addEventListener("astro:page-load", gcCount);
        document.addEventListener("astro:after-swap", gcCount);

        // optional: simple custom events (projects / external)
        document.addEventListener("click", (e) => {
          const el = (e.target instanceof Element) ? e.target.closest("a,button,[data-analytics]") : null;
          if (!el) return;
          const gc = window.goatcounter;
          if (!gc || typeof gc.count !== "function") return;

          if (el.tagName === "A" && el.getAttribute("data-analytics") === "project") {
            const slug = el.getAttribute("data-project") || "unknown";
            const title = el.getAttribute("data-title") || "Project click";
            gc.count({ path: `/event/project-click/${slug}`, title, event: true });
          }
          if (el.tagName === "A" && /linkedin\.com/i.test(el.href)) {
            gc.count({ path: "/event/linkedin", title: "LinkedIn Click", event: true });
          }
          if (el.tagName === "A" && /github\.com/i.test(el.href)) {
            gc.count({ path: "/event/github", title: "GitHub Click", event: true });
          }
        });

        /* ----- Delegated lightbox (works across swaps) ----- */
        const OPEN_ATTR = "data-open";
        function getDialog(id) { return id ? document.getElementById(id) : null; }
        function wireDialogAutoclose(dlg) {
          if (dlg.dataset.lbAutoclose === "1") return;
          dlg.dataset.lbAutoclose = "1";
          dlg.addEventListener("click", (e) => { if (e.target === dlg && dlg.close) dlg.close(); });
          dlg.addEventListener("keydown", (e) => { if (e.key === "Escape" && dlg.close) dlg.close(); });
        }
        document.addEventListener("click", (e) => {
          const btn = (e.target instanceof Element) ? e.target.closest(`[${OPEN_ATTR}]`) : null;
          if (!btn) return;
          const id = btn.getAttribute(OPEN_ATTR);
          const dlg = getDialog(id);
          if (!dlg || typeof dlg.showModal !== "function") return;
          wireDialogAutoclose(dlg);
          dlg.showModal();
        });
        const closeAllDialogs = () => {
          document.querySelectorAll("dialog[open]").forEach((d) => { try { d.close(); } catch {} });
        };
        document.addEventListener("astro:after-swap", closeAllDialogs);
        document.addEventListener("astro:page-load", closeAllDialogs);
      })();
    </script>
  </head>

  <body>
    <Header />
    <main id="main-content">
      <!-- pt-2/3 prevents first-child margin from “sticking” to the top after swaps -->
      <div class="mx-auto max-w-app px-4 sm:px-4 lg:px-10 pt-2 sm:pt-3 pb-16 sm:pb-24 pb-[max(4rem,env(safe-area-inset-bottom))]">
        <slot />
      </div>
    </main>
    <Footer />
  </body>
</html>

<style>
  html, body { margin: 0; width: 100%; height: 100%; }
</style>
